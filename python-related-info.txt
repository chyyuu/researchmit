python related info:

__name__ __slots__的解释
http://docs.python.org/2/reference/datamodel.html

 __name__	
 User-defined functions：Another way of spelling func_name
 User-defined methods： is the method name (same as im_func.__name__)
 Built-in functions： is the function’s name
 Modules：is the module’s name
 Classes：is the class name
 
 __slots__

类实例使用字典（__dict__）管理属性. 在对象只有少量实例变量时这就会占用不少空间, 当有大量实例时, 空间消耗会变得更为严重.这个默认行为可以通过在类定义中定义 __slots__ 修改. __slots__ 声明只为该类的所有实例预留刚刚够用的空间
_slots__ 是在类这一级实现的, 通过为每个实例创建描述符 (实现描述符). 因此, 不能使用类属性为实例的 __slots__ 中定义的属性设置默认值. 否则, 类属性会覆盖描述符的赋值操作.

python新模式的class，即从object继承下来的类有一个变量是__slots__，slots的作用是阻止在实例化类时为实例分配dict，默认情况下每个类都会有一个dict,通过__dict__访问，这个dict维护了这个实例的所有属性，举例如下
class base(object):
    v = 1
    def __init__(self):
          pass

b = base()
print b.__dict__
b.x = 2
print b.__dict__
运行：
{}
{'x':2}

可见：实例的dict只保持实例的变量，对于类的属性是不保存的，类的属性包括变量和函数。由于每次实例化一个类都要分配一个新的dict，因此存在空间的浪费，因此有了slots，当定义了slots后，slots中定义的变量变成了类的描述符，相当于java，c++中的成员变量声明，类的实例只能拥有这些个变量，而不在有dict，因此也就不能在增加新的变量

__dict__
每个python对象中都用一个字典来保存其命名空间，也就是__dict__。举栗来讲，C.x实际上是被翻译成C.__dict__[“x”]。那么，runtime地向C中添加一些成员就是小case了。一个例子程序如下：

class C:
    def __init__(self):
        self.x = 1
        self.y = 2

    def regist(self, key, val):
        self.__dict__[key] = val

c = C()
print c.__dict__
c.regist("z", 3)
c.regist("func", lambda x: "".join(["=>", str(x), "<="]))
print c.__dict__
print c.x, c.y, c.z, c.func("__dict__")

运行结果是

{'y': 2, 'x': 1}
{'y': 2, 'x': 1, 'z': 3, 'func': <function <lambda> at 0x2b55c97de668>}
1 2 3 =>__dict__<=



__new__：
创建对象时调用，但必须得返回一个实例,通常返回本类的实例(通过重写父类的方法)，你返回其他的，也不会报错(例如类E中)。这个方法一般也用于覆盖父类的方法，再对父类中的某些特征进行修改使之符合本类的使用。

__init__：
创建完对象后调用，对当前对象的实例的一些初始化，无返回值或者返回值为None，返回其他的就会报错。
如果重写了__new__方法而在__new__里面没有显示或者隐式(类C中的例子)调用__init__则__init__将不起作用


__nonzero__() 布尔数，
有两个永不改变的值 True 或 False
布尔型是整型的子类，但是不能再被继承而生成它的子类
没有 __nonzero__() 方法的读写的默认值是 True
对于值为零的任何数字或空集(空列表，空元组和空字典等)在 Python 中布尔值都是 False
在数学运算中，Boolean 值的 True 和 False 分别对应与 1 和 0


@Properties
是什么： 在运算量很小时，把对属性的 get 和 set 方法调用封装为标准的属性访问方式的一个方法。
优点： 对简单的属性访问来说，去掉直率的 get 和 set 方法调用提高了代码的可读性。允许延后计算。考虑到 Pythonic 的方法来维护类的接口。在性能方面，当直接变量访问是合理的，允许 Properties 就省略了琐碎的属性访问方法，而且将来仍然可以在不破坏接口的情况下重新加入属性访问方法。
缺点： Properties 在 getter 和 setter 方法声明之后生效，也就是要求使用者注意这些方法在代码很靠后的地方才能被使用（除了用 @property 描述符创建的只读属性之外 —— 见下文详述）。必须继承自 object 。会像运算符重载一样隐藏副作用。对子类来说会很难理解。
决定： 在那些你通常本来会用简单、轻量的访问/设置方法的代码中使用 Properties 来访问和设置数据。只读的属性应该用 @property 描述符?来创建。
如果 Property 自身没有被覆盖，那 Properties 的继承并非显而易见。因此使用者必须确保访问方法被间接调用，以便确保子类中被覆盖了的方法会被 Property 调用（使用“模板方法（Template Method）”设计模式）。

例子
import math

class Square(object):
  """基类 square 有可写的 'area' 属性和只读的 'perimeter' 属性。

  可以这样使用：
  >>> sq = Square(3)
  >>> sq.area
  9
  >>> sq.perimeter
  12
  >>> sq.area = 16
  >>> sq.side
  4
  >>> sq.perimeter
  16
  """

  def __init__(self, side):
    self.side = side

  def _getArea(self):
    """计算 'area' 属性的值"""
    return self.side ** 2

  def __getArea(self):
    """对 'area' 属性的间接访问器"""
    return self._getArea()

  def _setArea(self, area):
    """对 'area' 属性的设置器"""
    self.side = math.sqrt(area)

  def __setArea(self, area):
    """对 'area' 属性的间接设置器"""
    self._setArea(area)

  area = property(__getArea, __setArea,
                  doc="""Get or set the area of the square""")

  @property
  def perimeter(self):
    return self.side 
    
对python type的理解
====================
http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html

• There are two kinds of objects in Python:
    1. Type objects - can create instances, can be subclassed.
    2. Non-type objects - cannot create instances, cannot be subclassed.
• <type 'type'> and <type 'object'> are two primitive objects of the system.
• objectname.__class__ exists for every object and points the type of the object.
• objectname.__bases__ exists for every type object and points the superclasses of the
object. It is empty only for <type 'object'>.
• To create a new object using subclassing, we use the class statement and specify the
bases (and, optionally, the type) of the new object. This always creates a type object.
• To create a new object using instantiation, we use the call operator (()) on the type object
we want to use. This may create a type or a non-type object, depending on which type
object was used.
• Some non-type objects can be created using special Python syntax. For example, [1, 2,
3] creates an instance of <type 'list'>.
• Internally, Python always uses a type object to create a new object. The new object created
is an instance of the type object used. Python determines the type object from a class
statement by looking at the bases specified, and finding their types.
• issubclass(A,B) (testing for superclass-subclass relationship) returns True iff:
1. B is in A.__bases__, or
2. issubclass(Z,B) is true for any Z in A.__bases__.
• isinstance(A,B) (testing for type-instance relationship) returns True iff:
1. B is A.__class__, or
2. issubclass(A.__class__,B) is true.
• Squasher is really a python. (Okay, that wasn't mentioned before, but now you know.)

    
对python 属性的理解
=======================

http://fcamel-life.blogspot.com/2011/02/python-attribute-descriptor.html
http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html
http://users.rcn.com/python/download/Descriptor.htm
http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html
注意
这里解释了__dict__是啥， dir函数干啥，二者的关系是啥？

Attributes really sit inside a dictionary-like __dict__ in the object.
__dict__ contains only the user-provided attributes.

Ok, I admit 'user-provided attribute' is a term I made up, but I think it is useful to understand what is
going on. Note that __dict__ is itself an attribute. We didn't set this attribute ourselves, but Python
provides it. Our old friends __class__ and __bases__ (none which appear to be in __dict__
either) also seem to be similar. Let's call them Python-provided attributes. Whether an attribute is
Python-provided or not depends on the object in question (__bases__, for example, is
Python-provided only for classes).

When accessed (for e.g. print objectname.attributename), the following objects are
searched in sequence for the attribute:
1. The object itself (objectname.__dict__ or any Python-provided attribute of
objectname).
2. The object's type (objectname.__class__.__dict__). Observe that only __dict__ is
searched, which means only user-provided attributes of the class. In other words
objectname.__bases__ may not return anything even though
objectname.__class__.__bases__ does exist.
3. The bases of the object's class, their bases, and so on. (__dict__ of each of
objectname.__class__.__bases__). More than one base does not confuse Python,
and should not concern us at the moment. The point to note is that all bases are searched
until an attribute is found.

If all this hunting around fails to find a suitably named attribute, Python raises an
AttributeError. The type of the type (objectname.__class__.__class__) is never
searched for attribute access on an object (objectname in the example).

The built-in dir() function returns a list of all attributes of an object. Also look at the inspect
module in the standard library for more functions to inspect objects.

Some objects, such as built-in types and their instances (lists, tuples, etc.) do not have a
__dict__. Consequently user-defined attributes cannot be set on them.



http://www.2cto.com/kf/201209/154470.html
1. 类属性
    为在类定义时直接指定的属性(不是在__init__方法中)
class Test: 
    class_attribute1="attr-value"         
    
2. 实例属性
   在__init__方法中添加的属性, 在其他位置添加也是可以的, 实际是通过setattr内置函数(调用__setattr__)完成, 另外也可以直接修改__dict__属性手动添加
t=Test() 
setattr(t,attr_name,attr_value) #等价于 t.attr_name=attr_value 
t.__dict__[attr_name]=attr_value  

3. 通过重写__setattr__控制属性的添加
    该方法在setattr(t,attr_name,attr_value)或者t.attr_name=attr_value时被调用,通过重写该方法可以达到控制属性添加的功能
[python]
class Test: 
    def __setattr__(self,name,value): 
        if name=="key": 
            self.__dict__[name]=value 
这样, 在通过setattr(t,attr_name,attr_value)或者t.attr_name=attr_value添加新属性时, 就只能添加名称为key的属性了,
实际上这种控制是不完整的, 因为可以通过t.__dict__[attr_name]=attr_value的方式直接添加!            

4. 属性的访问顺序
    "instance.attr_name"访问实例属性时, 首先在instance.__dict__中查找, 如果找到返回对应值,否则在
    instance.__class__.__dict__中查找, 也就是在类属性中查找, 如果找到, 返回对应值, 否则产生attributeError异常


通常, 每个实例对象 x 都拥有一个字典 x.__dict__. python通过此字典允许你绑定任意属性给 x 实例. 定义一个名为 __slots__ 的类属性可以有效减少每个实例占用的内存数量. __slots__ 是一个字符串序列(通常是一个tuple).  当类 C 拥有 __slots__属性, x 的直接子类就没有 x.__dict__属性. 如果试图绑定一个 __slots__ 中不存在属性给实例的话, 就会引发异常. __slots__属性虽然令你失去绑定任意属性的方便, 却能有效节省每个实例的内存消耗, 有助于生成小而精干的实例对象.                
