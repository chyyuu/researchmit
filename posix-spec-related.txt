posix-spec-related

common cases, 2 processes (seems unrelated) a, b,   how about the [state,ret] (a.syscall-p, b.syscall-q) == [state,ret] (b.syscall-q, a.syscall-p)  
focus a small/core set of some normal & offen-used syscalls:

1 mm, mem management :     mmap, munmap, page-fault R/W  (we see page-fault is a "special" syscall, which need to care about )
2 fs, file system :        open, close, read, write stat
3 pm, process management:  fork, execv, 
4 ipc, inter-process comm: pipe, pipe-read, pipe-write (related with fork), signal
5 sync, lock:              futex,sema, 
6 other:                   timer?


Q:
1 the implementation is good for multicore?
communitivity sosp paper.
2 the interface is good for multicore?
3 hwo to static analyze or verify the implement spec is a special case of interface special?
4 how about the common/often used syscalls and usage patterns in real parallel computing/transaction apps

2.1 mm:   mmap, munmap (replace read/write)  page-fault R/W
2.2 fs:   openat, preadv, pwritev....
2.3 pm:   spawnv, clonev...
2.4 ipc:  ...ref cache/ref counter/oplog
2.5 sync: futex?

“stream of bytes”, parent/child, sync/instant, inorder is good?

maybe relax  relax stream-oriented and parent/child sync/instant  semantics to “vector of file bytes/mem byte/process” , "lazy/delay", "out of order"

and hope the change can support some apps.



POSIX I/O was developed to provide an interface from a single machine with a single memory space to a streaming
device with some simple random access capabilities

A re-interpretation
towards the concept of a “vector of bytes” would be more appropriate for HPC
applications versus a “stream of bytes” model.


以才会在futex的manual中说：对于大多数程序员不需要直接使用futexes，取而代之的是依靠建立在futex之上的系统库，如NPTL线程库
===========================
process related

--------------------------------------
       fork - create a child process

SYNOPSIS
       #include <unistd.h>

       pid_t fork(void);
DESCRIPTION
       fork() creates a new process by duplicating the calling process.  The new process, referred to as the child, is an exact duplicate of the calling process, referred to as the parent, except for
       the following points:

about COW
内核的实现很简单。页面在内核的页面相关数据结构中被标识为只读和写入时复制。
如果某个进程尝试修改某个页,将产生一个页面错误。然后内核处理页面错误,透明地复制这
个页。在这个时候,当前进程的页面的写入时复制属性被清除,从此不再共享。

--------------------------------------
       clone, __clone2 - create a child process

SYNOPSIS
       #define _GNU_SOURCE             /* See feature_test_macros(7) */
       #include <sched.h>

       int clone(int (*fn)(void *), void *child_stack,
                 int flags, void *arg, ...
                 /* pid_t *ptid, struct user_desc *tls, pid_t *ctid */ );

DESCRIPTION
       clone() creates a new process, in a manner similar to fork(2).  It is actually a library function layered on top of the underlying clone() system call, hereinafter referred to as sys_clone.  A
       description of sys_clone is given toward the end of this page.

       Unlike fork(2), these calls allow the child process to share parts of its execution context with the calling process, such as the memory space, the table of file descriptors, and the table  of
       signal handlers.  (Note that on this manual page, "calling process" normally corresponds to "parent process".  But see the description of CLONE_PARENT below.)

       The main use of clone() is to implement threads: multiple threads of control in a program that run concurrently in a shared memory space.


--------------------------------------
       execve - execute program

SYNOPSIS
       #include <unistd.h>
       int execve(const char *filename, char *const argv[],
                  char *const envp[]);

DESCRIPTION
       execve() executes the program pointed to by filename.  filename must be either a binary executable, or a script starting with a line of the form:
           #! interpreter [optional-arg]
       For details of the latter case, see "Interpreter scripts" below.

       argv  is  an  array  of  argument strings passed to the new program.  By convention, the first of these strings should contain the filename associated with the file being executed.  envp is an
       array of strings, conventionally of the form key=value, which are passed as environment to the new program.  Both argv and envp must be terminated by a NULL pointer.  The argument  vector  and
       environment can be accessed by the called program's main function, when it is defined as:

           int main(int argc, char *argv[], char *envp[])

       execve() does not return on success, and the text, data, bss, and stack of the calling process are overwritten by that of the program loaded.



--------------------------------------
       posix_spawn, posix_spawnp - spawn a process (ADVANCED REALTIME)

SYNOPSIS
       #include <spawn.h>

       int posix_spawn(pid_t *restrict pid, const char *restrict path,
              const posix_spawn_file_actions_t *file_actions,
              const posix_spawnattr_t *restrict attrp,
              char *const argv[restrict], char *const envp[restrict]);
       int posix_spawnp(pid_t *restrict pid, const char *restrict file,
              const posix_spawn_file_actions_t *file_actions,
              const posix_spawnattr_t *restrict attrp,
              char *const argv[restrict], char * const envp[restrict]);


--------------------------------------
       _exit, _Exit - terminate the calling process

SYNOPSIS
       #include <unistd.h>
       void _exit(int status);
       #include <stdlib.h>
       void _Exit(int status);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       _Exit():
           _XOPEN_SOURCE >= 600 || _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L;
           or cc -std=c99

DESCRIPTION
The function _exit() terminates the calling process "immediately".  Any open file descriptors belonging to the process are closed; any children of the process are inherited by process 1, init,
       and the process's parent is sent a SIGCHLD signal.
       The value status is returned to the parent process as the process's exit status, and can be collected using one of the wait(2) family of calls.
       The function _Exit() is equivalent to _exit().


=========================================
FS related
--------------------------------------
       openat - open a file relative to a directory file descriptor

SYNOPSIS
       #include <fcntl.h>

       int openat(int dirfd, const char *pathname, int flags);
       int openat(int dirfd, const char *pathname, int flags, mode_t mode);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       openat():
           Since glibc 2.10:
               _XOPEN_SOURCE >= 700 || _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _ATFILE_SOURCE

DESCRIPTION
       The openat() system call operates in exactly the same way as open(2), except for the differences described in this manual page.

       If  the pathname given in pathname is relative, then it is interpreted relative to the directory referred to by the file descriptor dirfd (rather than relative to the current working directory
       of the calling process, as is done by open(2) for a relative pathname).

       If pathname is relative and dirfd is the special value AT_FDCWD, then pathname is interpreted relative to the current working directory of the calling process (like open(2)).

       If pathname is absolute, then dirfd is ignored.

